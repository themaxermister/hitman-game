module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    
    input io_button [5],    // 5 buttons on IO Shield
    //input io_dip [3][8],    // DIP switches on IO Shield
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    output custom_out_A[32],      // Output banks
    output custom_out_B[32],
    output custom_out_C[32]
  ) {
  
    sig rst;                  // reset signal
  
    .clk(clk) {
      
      // The reset conditioner is used to synchronize the reset signal to the FPGA
      // clock. Ensures the entire FPGA comes out of reset at the same time.
      .rst(rst){
        beta_unit game_beta;
        multi_seven_seg ledseg(#DIGITS(2));
      }
    
      reset_conditioner reset_cond;
      edge_detector edge_dt_start_btn_p1 (#RISE(1), #FALL(0));
      edge_detector edge_dt_increase_btn_p1 (#RISE(1), #FALL(0));
      edge_detector edge_dt_decrease_btn_p1 (#RISE(1), #FALL(0));


      edge_detector edge_dt_start_btn_p2(#RISE(1), #FALL(0));
      edge_detector edge_dt_increase_btn_p2 (#RISE(1), #FALL(0));
      edge_detector edge_dt_decrease_btn_p2 (#RISE(1), #FALL(0));
    
  
      button_conditioner btn_cond_p1_enter;
      button_conditioner btn_cond_p1_increase;
      button_conditioner btn_cond_p1_decrease;
      button_conditioner btn_cond_p2_enter;
      button_conditioner btn_cond_p2_increase;
      button_conditioner btn_cond_p2_decrease;
  }
    
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = io_button[4];//reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    
    // Reset all hardware
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    //io_sel = 4hf;           // select no digits
    
    
    
    // Detect button press //to reduce the bouncing effects of your button 
    btn_cond_p1_enter.in=io_button[2]; // Change btn input from here
    btn_cond_p1_increase.in=io_button[2];
    btn_cond_p1_decrease.in=io_button[2]; 
    btn_cond_p2_enter.in=io_button[0];
    btn_cond_p2_increase.in=io_button[1];
    btn_cond_p2_decrease.in=io_button[3];
    

    //get the edge of button press
    edge_dt_start_btn_p1.in=btn_cond_p1_enter.out; 
    edge_dt_increase_btn_p1.in=btn_cond_p1_increase.out;
    edge_dt_decrease_btn_p1.in=btn_cond_p1_decrease.out; 
    edge_dt_start_btn_p2.in=btn_cond_p2_enter.out; 
    edge_dt_increase_btn_p2.in=btn_cond_p2_increase.out;
    edge_dt_decrease_btn_p2.in=btn_cond_p2_decrease.out; 
    


    
    // Pass button value to beta machine
    game_beta.p1_start_button = edge_dt_start_btn_p1.out;
    game_beta.p1_increase_button = edge_dt_increase_btn_p1.out;
    game_beta.p1_decrease_button = edge_dt_decrease_btn_p1.out;
    game_beta.p2_start_button = edge_dt_start_btn_p2.out;
    game_beta.p2_increase_button = edge_dt_increase_btn_p2.out;
    game_beta.p2_decrease_button = edge_dt_decrease_btn_p2.out;
    
    
    //TestTimer
    //ledseg.values[0]=game_beta.current_time[0];
    //ledseg.values[1]=game_beta.current_time[1];
    
    //Test P1 counter
    ledseg.values[0]=game_beta.current_time[0];
    ledseg.values[1]=game_beta.current_time[1];

    //io_led[0] = game_beta.debug_slowclock;
    io_seg = ~ledseg.seg;
    io_sel = ~ledseg.sel;
    
    //display ledseg
    io_led[0] = game_beta.random_display[7:0];
    io_led[1] = game_beta.random_display[15:8];
    io_led[2] = game_beta.p2_score_out[7:0];
    
    custom_out_A = 0;
    custom_out_B = 0;
    custom_out_C = 0;

  }
}